// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid String @id @default(uuid())
  email String @unique
  password String
  name String?
  role Role
  avatarUrl String?
  status Status @default(ACTIVE)
  area Area @default(ASIA)
  balance Float @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses Course[]
  reviews Review[]
  comments Comment[]
  payments Payment[]
  learnings Learning[]
  folders Folders[]
  notes Notes[]
  transactions Transaction[]
  enrollments Enrollment[]
  schedules Schedule[]
}

model Category {
  id Int @id @default(autoincrement())
  description String
  courses Course[]
}

model Course {
  id Int @id @default(autoincrement())
  uuid String
  user User @relation(fields: [uuid], references: [uuid])
  categoryId Int
  category Category @relation(fields: [categoryId], references: [id])
  title String
  description String?
  image String?
  price Float
  hidden Boolean @default(false)
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  reviews Review[]
  chapters Chapter[]
  enrollments Enrollment[]
  payments Payment[]
  folders Folders[]
  schedules Schedule[]
  discounts Discount[]
  resources Resource[]
}

model Review {
  id Int @id @default(autoincrement())
  courseId Int
  course Course @relation(fields: [courseId], references: [id])
  uuid String
  user User @relation(fields: [uuid], references: [uuid])
  rating Int
  reviewText String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Chapter {
  id Int @id @default(autoincrement())
  course Course @relation(fields: [courseId], references: [id])
  courseId Int
  title String
  sequenceNumber Int
  videos Video[]
}
model Video {
  id Int @id @default(autoincrement())
  chapter Chapter @relation(fields: [chapterId], references: [id])
  chapterId Int
  title String
  url String
  duration Int
  sequenceNumber Int
  subtitleUrl String?
  comments Comment[]
  learnings Learning[]
  notes Notes[]
  hidden Boolean @default(false)
  subtitles Subtitle[]
}
model Comment {
  id Int @id @default(autoincrement())
  videoId Int
  video Video @relation(fields: [videoId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [uuid])
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parentId Int?
  parent Comment? @relation("CommentOnComment",fields: [parentId], references: [id])
  children Comment[] @relation("CommentOnComment")
}

model Enrollment {
  uuid  String
  course Course @relation(fields: [courseId], references: [id])
  courseId Int
  cancelled Boolean @default(false)
  cencelledReason String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [uuid], references: [uuid])
  @@id([uuid, courseId])
}

model Payment {
  course Course @relation(fields: [courseId], references: [id])
  courseId Int
  user User @relation(fields: [uuid], references: [uuid])
  uuid String
  amount Float
  createdAt DateTime @default(now())
  @@id([uuid, courseId])
}

model Transaction {
  id Int @id @default(autoincrement())
  uuid String
  user User @relation(fields: [uuid], references: [uuid])
  type TransactionType
  amount Float
  status TransactionStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Learning {
  video Video @relation(fields: [videoId], references: [id])
  videoId Int
  user User @relation(fields: [uuid], references: [uuid])
  uuid String
  timeLearned Int
  completed Boolean @default(false)
  @@id([videoId, uuid])
}

model Folders {
  id Int @id @default(autoincrement())
  name String @default("Untitled")
  parentFolderId Int?
  user User @relation(fields: [uuid], references: [uuid])
  uuid String
  courseId Int?
  course Course? @relation(fields: [courseId], references: [id])
  notes Notes[]
  parent Folders? @relation("FolderOnFolders",fields: [parentFolderId], references: [id])
  children Folders[] @relation("FolderOnFolders")
}


model Notes {
  id Int @id @default(autoincrement())
  title String
  content String
  folderId Int?
  uuid String
  videoId Int?
  time Int?
  video Video? @relation(fields: [videoId], references: [id])
  folder Folders? @relation(fields: [folderId], references: [id])
  user User @relation(fields: [uuid], references: [uuid])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subtitle {
  id Int @id @default(autoincrement())
  videoId Int
  video Video @relation(fields: [videoId], references: [id])
  from Int
  to Int
  text String
}

model Schedule {
  courseId Int
  uuid String
  day Json
  time String?
  end DateTime?
  user User @relation(fields: [uuid], references: [uuid])
  course Course @relation(fields: [courseId], references: [id])
  @@id([courseId, uuid])
}

model Discount {
  id Int @id @default(autoincrement())
  courseId Int
  course Course @relation(fields: [courseId], references: [id])
  coupon String?
  percentage Int @default(0)
  type DiscountType
  expiredAt DateTime
  createdAt DateTime @default(now())

  @@unique([courseId, type])
}

model Resource {
  id Int @id @default(autoincrement())
  name String
  url String
  type String
  courseId Int
  course Course @relation(fields: [courseId], references: [id])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum Status {
  ACTIVE
  BANNED
}

enum Area {
  ASIA
  AMERICA
  EUROPE
  AFRICA
}



enum TransactionType {
  DEPOSIT // Nạp tiền
  WITHDRAWAL // Rút tiền
  TRANSFER // Chuyển kết
  PAYMENT // Thanh toán
  FEE // Phí
  REFUND // Hoàn trả
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELED
}

enum DiscountType {
  WITH_COUPON
  WITHOUT_COUPON
}